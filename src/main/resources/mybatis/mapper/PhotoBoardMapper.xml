<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toyproject.springsecurity.photoBoard.model.dao.PhotoBoardMapper">

    <resultMap id="photoBoardResultMap" type="PhotoBoardDTO">
        <id property="no" column="NO"/>
        <result property="title" column="TITLE"/>
        <result property="contents" column="CONTENTS"/>
        <result property="count" column="COUNT"/>
        <result property="registTime" column="REGIST_TIME"/>
        <result property="writer" column="WRITER"/>
        <result property="updateTime" column="UPDATE_TIME"/>
        <result property="deleteYn" column="DELETE_YN"/>
    </resultMap>

    <resultMap id="photoBoardFileResultMap" type="PhotoBoardFileDTO">
        <id property="fileNo" column="FILE_NO"/>
        <result property="boardNo" column="BOARD_NO"/>
        <result property="orgFileName" column="ORG_FILENAME"/>
        <result property="changeFileName" column="CHANGE_FILENAME"/>
        <result property="fileSize" column="FILE_SIZE"/>
        <result property="registTime" column="REGIST_TIME"/>
        <result property="deleteYn" column="DELETE_YN"/>
        <result property="filePath" column="FILE_PATH"/>
    </resultMap>

    <resultMap id="commentResultMap" type="CommentDTO">
        <id property="commentNo" column="COMMENT_NO"/>
        <result property="content" column="CONTENT"/>
        <result property="writer" column="WRITER"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="commentLike" column="COMMENT_LIKE"/>
        <result property="categoryNo" column="CATEGORY_NO"/>
        <result property="writeNo" column="WRITE_NO"/>
    </resultMap>

    <select id="photoBoardList" resultMap="photoBoardResultMap">
        SELECT
              A.NO
             , A.TITLE
             , A.CONTENTS
             , A.COUNT
             , A.REGIST_TIME
             , A.WRITER
             , A.UPDATE_TIME
             , A.DELETE_YN
          FROM (SELECT
                       ROWNUM RNUM
                     , B.NO
                     , B.TITLE
                     , B.CONTENTS
                     , B.COUNT
                     , B.REGIST_TIME
                     , B.WRITER
                     , B.UPDATE_TIME
                     , B.DELETE_YN
                  FROM (SELECT
                               C.NO
                             , C.TITLE
                             , C.CONTENTS
                             , C.COUNT
                             , C.REGIST_TIME
                             , C.WRITER
                             , C.UPDATE_TIME
                             , C.DELETE_YN
                          FROM PHOTO_BOARD C
        <where>
            <if test="searchCondition == 'writer'">
                C.WRITER = #{ searchValue }
            </if>
            <if test="searchCondition == 'title'">
                C.TITLE LIKE '%' || #{ searchValue } || '%'
            </if>
            <if test="searchCondition == 'content'">
                C.CONTENTS LIKE '%' || #{ searchValue } || '%'
            </if>
        </where>
        ORDER BY NO DESC
        ) B
        <![CDATA[
                 WHERE ROWNUM <= #{ endRow }
                ]]>
        ) A
        WHERE A.RNUM >= #{ startRow }
        ORDER BY 1 DESC
    </select>

    <select id="photoBoardCount" resultType="_int" parameterType="hashmap">
        SELECT
               COUNT(*)
          FROM PHOTO_BOARD
        <where>
            <if test="searchCondition == 'writer'">
                WRITER = #{ searchValue }
            </if>
            <if test="searchCondition == 'content'">
                CONTENTS = #{ searchValue }
            </if>
            <if test="searchCondition == 'title'">
                TITLE = #{ searchValue }
            </if>
        </where>
    </select>

    <select id="photoBoardDetail" resultMap="photoBoardResultMap">
        SELECT
               A.NO
             , A.TITLE
             , A.CONTENTS
             , A.COUNT
             , A.REGIST_TIME
             , A.WRITER
             , A.UPDATE_TIME
             , A.DELETE_YN
             , B.FILE_NO
             , B.CHANGE_FILENAME
             , B.FILE_PATH
        FROM PHOTO_BOARD A
        JOIN PHOTO_BOARD_FILE B ON (A.NO = B.BOARD_NO)
       WHERE A.NO = #{ no }
    </select>

    <update id="photoBoardIncreaseCount">
        UPDATE
               PHOTO_BOARD A
           SET A.COUNT = (SELECT B.COUNT FROM PHOTO_BOARD B WHERE B.NO = #{ no }) + 1
         WHERE A.NO = #{ no }
    </update>

    <insert id="photoBoardInsert">
        INSERT
          INTO PHOTO_BOARD
        (
          NO
        , TITLE
        , CONTENTS
        , COUNT
        , REGIST_TIME
        , WRITER
        , UPDATE_TIME
        , DELETE_YN
        )
        VALUES
        (
          SEQ_PHOTOBOARD_NO.NEXTVAL
        , #{ title }
        , #{ contents }
        , 0
        , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
        , #{ writer }
        , DEFAULT
        , DEFAULT
        )
    </insert>

    <insert id="photoBoardFileInsert">
        INSERT
          INTO PHOTO_BOARD_FILE
        (
          FILE_NO
        , BOARD_NO
        , ORG_FILENAME
        , CHANGE_FILENAME
        , FILE_SIZE
        , REGIST_TIME
        , DELETE_YN
        , FILE_PATH
        )
        VALUES
        (
          SEQ_PHOTO_FILE_NO.NEXTVAL
        , SEQ_PHOTOBOARD_NO.CURRVAL
        , #{ orgFileName }
        , #{ changeFileName }
        , #{ fileSize }
        , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
        , DEFAULT
        , #{ filePath }
        )
    </insert>
</mapper>